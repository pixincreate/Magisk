name: Magisk Build

on:
  push:
    branches: [master]
    paths:
      - "app/**"
      - "native/**"
      - "build.py"
      - ".github/workflows/build.yml"
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      make_release:
        default: false
        description: Make a forced release
        required: false
        type: boolean
  workflow_call:

jobs:
  build:
    name: Build Magisk artifacts
    runs-on: macos-15
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          is-asset-build: true

      - name: Setup keystores
        run: |
          cat > config.prop<< EOF
            keyStore=key.jks
            keyStorePass=${{ secrets.KEYSTORE_ALIAS_PASSWORD }}
            keyAlias=${{ secrets.KEYSTORE_ALIAS_NAME }}
            keyPass=${{ secrets.KEYSTORE_PASSWORD }}
          EOF

          echo '${{ secrets.KEYSTORE_FILE }}' > keystore.jks.asc
          gpg -d --passphrase '${{ secrets.KEYSTORE_PASSWORD_GPG }}' --batch keystore.jks.asc > key.jks

      - name: Build release
        run: ./build.py -vr all

      - name: Build debug
        run: ./build.py -v all

      - name: Stop gradle daemon
        run: ./app/gradlew --stop

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.sha }}
          path: out
          compression-level: 9

      - name: Check for Release
        id: check_release
        run: |
          git fetch --all --tags
          DO_RELEASE=false
          IS_PRERELEASE=true
          RELEASE_COMMIT_HASH=""
          COMMIT_RANGE_TO_SCAN=""

          # Handle forced releases from workflow_dispatch first
          if [[ "${{ inputs.make_release }}" == "true" ]]; then
            DO_RELEASE=true
            RELEASE_COMMIT_HASH=${{ github.sha }}
            echo "Forcing a pre-release due to workflow input for commit $RELEASE_COMMIT_HASH."
          # Handle push and scheduled events
          elif [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "schedule" ]]; then
            # On a new branch or a force-push, the before..after range is often invalid.
            # In these cases, we fall back to scanning the last N commits from HEAD.
            if [[ "${{ github.event.created }}" == "true" || "${{ github.event.forced }}" == "true" || "${{ github.event_name }}" == "schedule" ]]; then
              if [[ "${{ github.event.created }}" == "true" ]]; then
                echo "New branch detected. Scanning recent commits for a release."
              elif [[ "${{ github.event.forced }}" == "true" ]]; then
                echo "Force push detected. Scanning recent commits for a release."
              else
                echo "Scheduled run detected. Scanning recent commits for missed releases."
              fi
              # Scan the history of the current HEAD. Limit to 20 to be safe.
              COMMIT_RANGE_TO_SCAN="--max-count=20 ${{ github.sha }}"
            else
              # For a normal push to an existing branch, the range is reliable.
              COMMIT_RANGE_TO_SCAN="${{ github.event.before }}..${{ github.sha }}"
              echo "Scanning commit range: $COMMIT_RANGE_TO_SCAN"
            fi

            # The `|| true` prevents the script from exiting if git log returns a non-zero status (e.g., invalid range)
            # Search for both "Release Magisk" and "Release new canary build" commits
            RELEASE_COMMIT_HASH=$(git log $COMMIT_RANGE_TO_SCAN --grep="Release Magisk" --grep="Release new canary build" -E --max-count=1 --pretty=%H || true)

            if [[ -n "$RELEASE_COMMIT_HASH" ]]; then
              DO_RELEASE=true
              echo "Found release-triggering commit: $RELEASE_COMMIT_HASH"
            fi
          fi

          if [[ "$DO_RELEASE" == "true" ]]; then
            LATEST_TAG=$(git describe --tags --exact-match $RELEASE_COMMIT_HASH 2>/dev/null || true)

            # Determine if this is a stable release based on tag format
            if [[ -n "$LATEST_TAG" && "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
              # Major version release (e.g., v28.1, v29.0) - not a pre-release
              IS_PRERELEASE=false
              echo "Detected stable release tag: $LATEST_TAG"
            else
              # Canary, beta, or forced releases are pre-releases
              IS_PRERELEASE=true
              echo "Detected pre-release tag: $LATEST_TAG (or untagged forced release)"
            fi

            echo "DO_RELEASE=true" >> $GITHUB_ENV
            echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV
            echo "RELEASE_COMMIT_HASH=$RELEASE_COMMIT_HASH" >> $GITHUB_ENV
            echo "RELEASE_TAG=$LATEST_TAG" >> $GITHUB_ENV
          else
            echo "No release-triggering commit or input found."
            echo "DO_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Setup Git
        if: ${{ env.DO_RELEASE == 'true' }}
        run: git config --global user.email ${{ secrets.EMAIL }} && git config --global user.name PiX

      - name: Fetch Release Info
        if: ${{ env.DO_RELEASE == 'true' }}
        id: fetch_info
        run: |
          COMMIT_HASH=$(git rev-parse --short $RELEASE_COMMIT_HASH)
          MAGISK_VERSION=$(grep 'magisk.versionCode=' app/gradle.properties | awk -F= '{print $2}')
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "MAGISK_VERSION=$MAGISK_VERSION" >> $GITHUB_ENV

          # Use the tag found in the previous step, or create a fallback for untagged forced releases
          RELEASE_TAG=${{ env.RELEASE_TAG }}
          if [[ -z "$RELEASE_TAG" ]]; then
            RELEASE_TAG="canary-$MAGISK_VERSION"
          fi
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

          # Construct a release title
          if [[ "$RELEASE_TAG" == v* ]]; then
              RELEASE_TITLE="Magisk $RELEASE_TAG"
          else
              RELEASE_TITLE="Magisk ($COMMIT_HASH) ($MAGISK_VERSION)"
          fi
          echo "RELEASE_TITLE=$RELEASE_TITLE" >> $GITHUB_ENV

      - name: Create Release Notes
        if: ${{ env.DO_RELEASE == 'true' }}
        run: |
          # Try to extract notes from the annotated git tag of the release commit
          if [[ -n "${{ env.RELEASE_TAG }}" ]]; then
            git tag -l --format='%(contents)' "${{ env.RELEASE_TAG }}" > notes.md
          fi
          # If notes are still empty, add a placeholder
          if [ ! -s notes.md ]; then
            echo "This is a new build of Magisk." > notes.md
          fi
          echo -e '\n## Diffs to Official Magisk\n\nAdded support for GrapheneOS for personal use' >> notes.md
          echo "Generated Release Notes:"
          cat notes.md

      - name: Release APK
        if: ${{ env.DO_RELEASE == 'true' && env.RELEASE_TAG != '' }}
        uses: "dciborow/action-github-releases@v1.0.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.RELEASE_TAG }}"
          prerelease: ${{ env.IS_PRERELEASE }}
          title: "${{ env.RELEASE_TITLE }}"
          files: |
            out/app-release.apk
            out/app-debug.apk
            notes.md

      - name: Upload mapping and native debug symbols
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.sha }}-symbols
          path: app/apk/build/outputs
          compression-level: 9

  test-build:
    name: Test building on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2025, ubuntu-24.04]
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Setup environment
        uses: ./.github/actions/setup

      - name: Test build
        run: python build.py -v -c .github/ci.prop all

      - name: Stop gradle daemon
        run: ./app/gradlew --stop

  avd-test:
    name: Test API ${{ matrix.version }} (x86_64)
    runs-on: ubuntu-24.04
    needs: build
    if: ${{ github.event_name != 'push' }}
    strategy:
      fail-fast: false
      matrix:
        version: [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, "CANARY"]
        type: [""]
        include:
          - version: "CANARY"
            type: "google_apis_ps16k"

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.sha }}
          path: out

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run AVD test
        timeout-minutes: 15
        env:
          AVD_TEST_LOG: 1
        run: scripts/avd.sh test ${{ matrix.version }} ${{ matrix.type }}

      - name: Upload logs on error
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: "avd-logs-${{ matrix.version }}"
          path: |
            kernel.log
            logcat.log

  avd-test-32:
    name: Test API ${{ matrix.version }} (x86)
    runs-on: ubuntu-24.04
    needs: build
    if: ${{ github.event_name != 'push' }}
    strategy:
      fail-fast: false
      matrix:
        version: [23, 24, 25, 26, 27, 28, 29, 30]

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.sha }}
          path: out

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run AVD test
        timeout-minutes: 15
        env:
          FORCE_32_BIT: 1
          AVD_TEST_LOG: 1
        run: scripts/avd.sh test ${{ matrix.version }}

      - name: Upload logs on error
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: "avd32-logs-${{ matrix.version }}"
          path: |
            kernel.log
            logcat.log

  cf-test:
    name: Test ${{ matrix.device }}
    runs-on: ubuntu-24.04
    needs: build
    if: ${{ github.event_name != 'push' }}
    env:
      CF_HOME: /home/runner/aosp_cf_phone
    strategy:
      fail-fast: false
      matrix:
        include:
          - branch: "aosp-android-latest-release"
            device: "aosp_cf_x86_64_only_phone"

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.sha }}
          path: out

      - name: Setup Cuttlefish environment
        run: |
          scripts/cuttlefish.sh setup
          scripts/cuttlefish.sh download ${{ matrix.branch }} ${{ matrix.device }}

      - name: Run Cuttlefish test
        timeout-minutes: 15
        run: sudo -E -u $USER scripts/cuttlefish.sh test

      - name: Upload logs on error
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: "cvd-logs-${{ matrix.device }}"
          path: |
            /home/runner/aosp_cf_phone/cuttlefish/instances/cvd-1/logs
            /home/runner/aosp_cf_phone/cuttlefish/instances/cvd-1/cuttlefish_config.json
